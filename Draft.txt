***********************************************Patterns that i should code**********************************************************
Abstract Factory Pattern
Iterator
State:Game. Make the character to walk,talk,run,fight. Pass command and change the state. Change state A-> B, A->A 
Decorator
Bridge
************************************************************************************************************************************
update "Happens Before"
What is Mutex, Semaphore
Why wait(), notify() and notifyAll() are in Object Class ?
What is ThreadGroup 
Analyzed Thread Dumps
************************************************************************************************************************************
Sometimes type casts are unavoidable and in Generic code they happen often without the programmer ever noticing. Therefore, significant effort was made to make type cast quite fast.

Telescoping constructor pattern: One constructor with only required fields and many other construtors with different combinations of optional fields. Difficult to mantain and bug prone.

JavaBeans Pattern: One constructor with only required fields and setters for all other optional patterns. Inconsistant state and supports mutability.
************************************************************************************************************************************
FactoryPattern:
It is about creating an object. When/Who creates it

Instead of "new Object()"  we are calling Factory.createNewObjet(parameters). How is it going to make difference
There is or there must be some bussiness logic that dynamically determines which object has to be created.

************************************************************************************************************************************
The JVM consists of three distinct components:

Class Loader
Runtime Memory/Data Area
Execution Engine

Class Loader :
	The JVM uses the ClassLoader.loadClass() method for loading the class into memory. It tries to load the class based on a fully qualified name.
The first class to be loaded into memory is usually the class that contains the main() method. There are three phases in the class loading process: loading, linking, and initialization.

Loading :	
	Loading involves taking the bytecode of a class with a particular name, and generating the original class.